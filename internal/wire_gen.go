// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"catalog-be/internal/config"
	"catalog-be/internal/middlewares"
	"catalog-be/internal/modules/auth"
	"catalog-be/internal/modules/circle"
	"catalog-be/internal/modules/circle_block"
	"catalog-be/internal/modules/fandom"
	"catalog-be/internal/modules/refresh_token"
	"catalog-be/internal/modules/user"
	"catalog-be/internal/modules/work_type"
	"catalog-be/internal/router"
	"catalog-be/internal/utils"
	"github.com/go-playground/validator/v10"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitializeServer(db *gorm.DB, validator2 *validator.Validate) *router.HTTP {
	userRepo := user.NewUserRepo(db)
	userService := user.NewUserService(userRepo)
	config := internal_config.NewConfig()
	refreshTokenRepo := refreshtoken.NewRefreshTokenRepo(db)
	utilsUtils := utils.NewUtils()
	refreshTokenService := refreshtoken.NewRefreshTokenService(refreshTokenRepo, utilsUtils)
	authService := auth.NewAuthService(userService, config, refreshTokenService, utilsUtils)
	authHandler := auth.NewAuthHandler(authService, validator2)
	authMiddleware := middlewares.NewAuthMiddleware(userService)
	fandomRepo := fandom.NewFandomRepo(db)
	fandomService := fandom.NewFandomService(fandomRepo)
	fandomHandler := fandom.NewFandomHandler(fandomService, validator2)
	workTypeRepo := work_type.NewWorkTypeRepo(db)
	workTypeService := work_type.NewWorkTypeService(workTypeRepo)
	workTypeHandler := work_type.NewWorkTypeHandler(workTypeService)
	circleRepo := circle.NewCircleRepo(db)
	circleBlockRepo := circleblock.NewCircleBlockRepo(db)
	circleBlockService := circleblock.NewCircleBlockService(circleBlockRepo)
	circleService := circle.NewCircleService(circleRepo, userService, utilsUtils, refreshTokenService, circleBlockService)
	circleHandler := circle.NewCircleHandler(circleService, validator2, circleBlockService)
	http := router.NewHTTP(authHandler, authMiddleware, fandomHandler, workTypeHandler, circleHandler)
	return http
}
